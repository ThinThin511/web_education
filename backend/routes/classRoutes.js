const express = require("express");
const router = express.Router();
const multer = require("multer");
const jwt = require("jsonwebtoken");
const Class = require("../models/Class"); // Model l·ªõp h·ªçc
const User = require("../models/User");

// C·∫•u h√¨nh multer ƒë·ªÉ l∆∞u ·∫£nh (kh√¥ng b·∫Øt bu·ªôc)
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/"); // L∆∞u v√†o th∆∞ m·ª•c uploads
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + "-" + file.originalname); // T·∫°o t√™n file duy nh·∫•t
  },
});

const upload = multer({ storage });

// API t·∫°o l·ªõp h·ªçc (ch·ªâ l∆∞u d·ªØ li·ªáu, kh√¥ng random m√£ l·ªõp)
const mongoose = require("mongoose");

router.post("/create", upload.single("image"), async (req, res) => {
  try {
    const { name, description, classCode, creatorId } = req.body;

    if (!name || !classCode || !creatorId) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt" });
    }

    // √âp ki·ªÉu creatorId sang ObjectId
    const creatorObjectId = new mongoose.Types.ObjectId(creatorId);

    // ƒê∆∞·ªùng d·∫´n ·∫£nh (n·∫øu c√≥)
    const imagePath = req.file
      ? `http://localhost:5000/uploads/${req.file.filename}`
      : null;

    const newClass = new Class({
      name,
      description,
      classCode,
      teachers: [creatorObjectId],
      image: imagePath, // L∆∞u ƒë∆∞·ªùng d·∫´n thay v√¨ base64
    });

    console.log("D·ªØ li·ªáu tr∆∞·ªõc khi l∆∞u:", newClass);

    await newClass.save();
    res.status(201).json({ message: "L·ªõp h·ªçc ƒë√£ ƒë∆∞·ª£c t·∫°o", class: newClass });
  } catch (error) {
    console.error("L·ªói khi t·∫°o l·ªõp:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
});

router.post("/join", async (req, res) => {
  try {
    const { classCode, userId } = req.body;

    if (!classCode || !userId) {
      return res.status(400).json({ message: "Thi·∫øu m√£ l·ªõp h·ªçc ho·∫∑c userId" });
    }

    // √âp ki·ªÉu userId sang ObjectId
    const userObjectId = new mongoose.Types.ObjectId(userId);

    // T√¨m l·ªõp h·ªçc theo m√£
    const existingClass = await Class.findOne({ classCode });

    if (!existingClass) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc" });
    }

    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findById(userObjectId);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra xem user ƒë√£ l√† h·ªçc sinh c·ªßa l·ªõp ch∆∞a
    if (existingClass.students.includes(userObjectId)) {
      return res.status(200).json({ message: "B·∫°n ƒë√£ tham gia l·ªõp n√†y r·ªìi" });
    }

    // Th√™m user v√†o danh s√°ch h·ªçc sinh
    existingClass.students.push(userObjectId);
    await existingClass.save();

    res.json({ message: "Tham gia l·ªõp h·ªçc th√†nh c√¥ng!", class: existingClass });
  } catch (error) {
    console.error("L·ªói khi tham gia l·ªõp:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
});

router.post("/join/:classId", async (req, res) => {
  try {
    const { classId } = req.params;
    const token = req.header("Authorization")?.split(" ")[1];

    if (!token) {
      return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    // Gi·∫£i m√£ token ƒë·ªÉ l·∫•y th√¥ng tin user
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET);
    } catch (error) {
      return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá" });
    }

    const user = await User.findById(decoded.id);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    const classroom = await Class.findById(classId);
    if (!classroom) {
      return res.status(404).json({ message: "L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ l√† th√†nh vi√™n ch∆∞a
    if (
      classroom.students.includes(user.id) ||
      classroom.teachers.includes(user.id)
    ) {
      return res
        .status(400)
        .json({ message: "B·∫°n ƒë√£ l√† th√†nh vi√™n c·ªßa l·ªõp n√†y" });
    }

    // Th√™m v√†o danh s√°ch h·ªçc sinh
    classroom.students.push(user.id);
    await classroom.save();

    res.json({ message: "Tham gia l·ªõp th√†nh c√¥ng", classroom });
  } catch (error) {
    console.error("L·ªói khi tham gia l·ªõp:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
});

router.get("/", async (req, res) => {
  try {
    const { userId } = req.query;
    console.log("üìå API classes ƒë∆∞·ª£c g·ªçi v·ªõi userId:", userId);

    if (!userId) return res.status(400).json({ message: "Thi·∫øu userId" });

    const userObjectId = new mongoose.Types.ObjectId(userId);
    const classes = await Class.find({
      $or: [{ teachers: userObjectId }, { students: userObjectId }],
    })
      .populate("teachers", "fullname avatar") // L·∫•y th√¥ng tin gi√°o vi√™n t·ª´ User
      .populate("students", "fullname");

    console.log("üìå Danh s√°ch l·ªõp tr·∫£ v·ªÅ:", classes);
    res.json({ classes });
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch l·ªõp:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
});
router.get("/:classId/people", async (req, res) => {
  try {
    const classId = req.params.classId;

    // T√¨m l·ªõp h·ªçc v√† populate th√¥ng tin gi√°o vi√™n, h·ªçc sinh
    const classroom = await Class.findById(classId)
      .populate("teachers", "fullname avatar _id")
      .populate("students", "fullname avatar _id");

    if (!classroom) {
      return res.status(404).json({ message: "L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({
      teachers: classroom.teachers,
      students: classroom.students,
      classroom,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch th√†nh vi√™n:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
});

router.delete("/:classId/students/:studentId", async (req, res) => {
  console.log("Headers nh·∫≠n ƒë∆∞·ª£c:", req.headers); // Ki·ªÉm tra headers

  try {
    const { classId, studentId } = req.params;
    const token = req.header("Authorization")?.split(" ")[1];

    if (!token) {
      return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    // Gi·∫£i m√£ token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log("Token gi·∫£i m√£:", decoded); // Ki·ªÉm tra n·ªôi dung token

    const user = await User.findById(decoded.id).select("-password");
    if (!user) {
      return res.status(401).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    const classroom = await Class.findById(classId);
    if (!classroom) {
      return res.status(404).json({ message: "L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i" });
    }

    if (!classroom.teachers.includes(user._id)) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a h·ªçc sinh" });
    }

    const studentIndex = classroom.students.indexOf(studentId);
    if (studentIndex === -1) {
      return res.status(404).json({ message: "H·ªçc sinh kh√¥ng c√≥ trong l·ªõp" });
    }

    classroom.students.splice(studentIndex, 1);
    await classroom.save();

    res.json({ message: "X√≥a h·ªçc sinh th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói khi x√≥a h·ªçc sinh:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
});

module.exports = router;
